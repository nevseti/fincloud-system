from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import List
import os

from . import models, schemas, auth_utils
from .database import get_db, engine
from .models import Base

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="Finance Service",
    description="–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏",
    version="1.0.0"
)

# CORS middleware - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
@app.middleware("http")
async def cors_middleware(request: Request, call_next):
    if request.method == "OPTIONS":
        response = JSONResponse(content={"message": "CORS preflight"})
    else:
        response = await call_next(request)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ –í–°–ï–ú –æ—Ç–≤–µ—Ç–∞–º
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "Content-Type, Authorization, X-Requested-With"
    response.headers["Access-Control-Allow-Credentials"] = "true"
    
    return response

# –Ø–≤–Ω—ã–µ OPTIONS handlers –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π
@app.options("/{path:path}")
async def options_handler(path: str):
    return JSONResponse(
        content={"message": "CORS preflight"},
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With",
            "Access-Control-Allow-Credentials": "true"
        }
    )

@app.options("/")
async def options_root():
    return JSONResponse(
        content={"message": "CORS preflight"},
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With", 
            "Access-Control-Allow-Credentials": "true"
        }
    )

security = HTTPBearer()

def get_current_user_data(credentials = Depends(security)):
    token = credentials.credentials
    user_data = auth_utils.get_current_user(token)
    return user_data

# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
@app.post("/operations", response_model=schemas.OperationResponse)
def create_operation(
    operation_data: schemas.OperationCreate,
    user_data: dict = Depends(get_current_user_data),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    role = user_data.get('role')
    user_branch_id = user_data.get('branch_id')
    
    # –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    if role == 'manager':
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏"
        )
    
    # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    if role == 'accountant':
        if operation_data.branch_id != user_branch_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞"
            )
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    db_operation = models.Operation(
        type=operation_data.type,
        amount=operation_data.amount,
        description=operation_data.description,
        user_id=user_data["user_id"],
        branch_id=operation_data.branch_id
    )
    
    db.add(db_operation)
    db.commit()
    db.refresh(db_operation)
    
    return db_operation

@app.get("/operations", response_model=List[schemas.OperationResponse])
def get_operations(
    user_data: dict = Depends(get_current_user_data),
    db: Session = Depends(get_db),
    branch_id: int = None
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    role = user_data.get('role')
    user_branch_id = user_data.get('branch_id')
    
    # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    if role == 'accountant':
        query = db.query(models.Operation).filter(models.Operation.branch_id == user_branch_id)
    else:
        # –ê–¥–º–∏–Ω –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        query = db.query(models.Operation)
        if branch_id:
            query = query.filter(models.Operation.branch_id == branch_id)
    
    operations = query.order_by(models.Operation.created_at.desc()).all()
    return operations

@app.get("/balance", response_model=schemas.BalanceResponse)
def get_balance(
    user_data: dict = Depends(get_current_user_data),
    db: Session = Depends(get_db),
    branch_id: int = None
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    role = user_data.get('role')
    user_branch_id = user_data.get('branch_id')
    
    # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä - —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    if role == 'accountant':
        if branch_id and branch_id != user_branch_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ —ç—Ç–æ–º—É —Ñ–∏–ª–∏–∞–ª—É"
            )
        # –ï—Å–ª–∏ branch_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª–∏–∞–ª –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞
        actual_branch_id = branch_id or user_branch_id
        query = db.query(models.Operation).filter(models.Operation.branch_id == actual_branch_id)
    else:
        # –ê–¥–º–∏–Ω –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å - –ª—é–±–æ–π –±–∞–ª–∞–Ω—Å
        query = db.query(models.Operation)
        if branch_id:
            query = query.filter(models.Operation.branch_id == branch_id)
    
    # –°—á–∏—Ç–∞–µ–º –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
    income_result = query.filter(models.Operation.type == "income").with_entities(func.sum(models.Operation.amount)).scalar()
    total_income = income_result if income_result else 0.0
    
    expense_result = query.filter(models.Operation.type == "expense").with_entities(func.sum(models.Operation.amount)).scalar()
    total_expense = expense_result if expense_result else 0.0
    
    total_balance = total_income - total_expense
    
    return {
        "total_balance": total_balance,
        "total_income": total_income,
        "total_expense": total_expense,
        "branch_id": branch_id or 0
    }

@app.get("/health")
def health_check():
    return {"status": "healthy", "service": "finance-service"}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ –ó–∞–ø—É—Å–∫ Finance Service —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º CORS...")
    uvicorn.run(app, host="0.0.0.0", port=8001)