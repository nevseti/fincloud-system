// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º API
const FinanceAPI = {
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    async createOperation(operationData) {
        const token = Storage.getToken();
        const response = await fetch(`${API_CONFIG.FINANCE_SERVICE}/operations`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(operationData)
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
        }

        return await response.json();
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
    async getOperations(branchId = null) {
        const token = Storage.getToken();
        let url = `${API_CONFIG.FINANCE_SERVICE}/operations`;
        
        if (branchId) {
            url += `?branch_id=${branchId}`;
        }

        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π');
        }

        return await response.json();
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    async getBalance(branchId = null) {
        const token = Storage.getToken();
        let url = `${API_CONFIG.FINANCE_SERVICE}/balance`;
        
        if (branchId) {
            url += `?branch_id=${branchId}`;
        }

        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        }

        return await response.json();
    }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const Formatter = {
    formatCurrency: (amount) => {
        console.log(`üí∞ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É: ${amount}`);
        const result = new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB'
        }).format(amount);
        console.log(`üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        return result;
    },

    formatDate: (dateString) => {
        console.log(`üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: ${dateString}`);
        const date = new Date(dateString);
        const result = date.toLocaleDateString('ru-RU') + ' ' + date.toLocaleTimeString('ru-RU', {hour: '2-digit', minute:'2-digit'});
        console.log(`üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
        return result;
    },

    getOperationTypeLabel: (type) => {
        console.log(`üè∑Ô∏è –ü–æ–ª—É—á–∞–µ–º label –¥–ª—è —Ç–∏–ø–∞: ${type}`);
        return type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
    },

    getOperationTypeClass: (type) => {
        console.log(`üé® –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∞: ${type}`);
        return type === 'income' ? 'income' : 'expense';
    }
};